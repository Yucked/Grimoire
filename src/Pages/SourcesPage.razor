@page "/sources"
@using Grimoire.Handlers
@using Grimoire.Sources.Interfaces

@inject IJSRuntime JSRuntime
@inject DatabaseHandler DatabaseHandler
@inject NavigationManager NavigationManager

<div class="container p-4">
    @if (_sources == null || !_sources.Any()) {
        <Waiting Message="Loading sources"/>
    }
    else {
        <div class="rounded-4">
            <div class="container p-4">
                <Search OnSearchAsync="OnSearchAsync"></Search>
            </div>

            <ul class="list-group list-group-flush">
                <div class="row row-cols-1 g-4">
                    @foreach (var source in _sources) {
                        <div class="col rounded">
                            <a class="list-group-item list-group-item-action shadow" @onclick="() => NavTo(source.Id)">
                                <img src="@DatabaseHandler.GetSourceIcon(source.Id)" class="img-thumbnail" alt="@source.Name" width="70">
                                <span>@source.Name</span>
                            </a>
                        </div>

                        <div id="@source.Id" class="col visually-hidden">

                        </div>
                    }
                </div>
            </ul>
        </div>
    }
</div>

@code {
    private IReadOnlyList<IGrimoireSource> _sources;
    private bool _isHidden = true;

    protected override async Task OnInitializedAsync() {
        _sources = await DatabaseHandler.ListSourcesAsync();
    }

    private void NavTo(string sourceId) {
        NavigationManager.NavigateTo($"/sources/{sourceId}");
    }

    private async Task OnSearchAsync(string arg) {
        var mangas = await DatabaseHandler.SearchAsync(SearchType.Global, arg);
        var dict = mangas
            .GroupBy(x => x.SourceId, y => y)
            .ToDictionary(x => x.Key, x => x.ToList());

        await JSRuntime.InvokeVoidAsync("displayData", dict);
    }

}