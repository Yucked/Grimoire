@page "/sources/{SourceId}"
@page "/sources/{SourceId}/{PageNumber:int}"

@using Grimoire.Handlers
@using Grimoire.Helpers

@inject DatabaseHandler DatabaseHandler
@inject NavigationManager NavigationManager

<div class="container-lg py-4">

    <div class="row row-cols-1 g-4">
        <div class="col">
            <div class="container text-center rounded color-slateblack p-2 my-3 shadow-sm">
                <div class="row justify-content-md-center gy-2 my-2">
                    <div class="col col-lg-2"></div>
                    <div class="col-md-auto">
                        <div class="container">
                            <img src="@DatabaseHandler.GetSourceIcon(SourceId)"
                                 alt="@SourceId" width="70">
                            <span class="font-monospace">
                                @SourceId.GetNameFromId() | <span class="badge bg-secondary">Mangas: @_book.ItemCount</span>
                            </span>
                        </div>
                    </div>
                    <div class="col col-lg-2"></div>
                </div>

                <div class="row gy-2 my-2 pb-2">
                    <div class="col-sm px-4">
                        <button class="btn btn-dark w-100" @onclick="RefreshAsync">Refresh 👀</button>
                    </div>
                    <div class="col-sm px-4">
                        <select class="form-select" @onchange="OnChangeAsync">
                            <option selected>Sort By</option>
                            <option value="1">Latest</option>
                            <option value="2">Name</option>
                            <option value="3">Chapters</option>
                        </select>
                    </div>
                    <div class="col-sm px-4">
                        <Search OnSearchAsync="OnSearchAsync"></Search>
                    </div>
                </div>
            </div>
        </div>

        @if (!_book.HasAnyPages) {
            <Waiting Message=@LoadingMessage/>
        }
        else {
            <div class="col">
                <div class="row row-cols-2 row-cols-md-4 g-4">
                    @foreach (var manga in _currentPage.Items) {
                        <div class="col">
                            <MangaCard SourceId="@SourceId" Manga="@manga"/>
                        </div>
                    }
                </div>
            </div>

            @if (_book.Pages.Count > 1) {
                <div class="col">
                    <nav aria-label="Page navigation">
                        <ul class="pagination pagination-lg justify-content-center">
                            <li class="page-item @(!_book.IsValidPage(PageNumber - 1) ? "disabled" : "")">
                                <a class="page-link" @onclick="() => Nav(PageNumber - 1)">
                                    <span aria-hidden="true">&laquo;</span>
                                </a>
                            </li>

                            <li class="page-item @(!_book.IsValidPage(PageNumber + 1) ? "disabled" : "")">
                                <a class="page-link" @onclick="() => Nav(PageNumber + 1)">
                                    <span aria-hidden="true">&raquo;</span>
                                </a>
                            </li>

                        </ul>
                    </nav>
                </div>
            }
        }
    </div>
</div>

@code
{
    [Parameter]
    public string SourceId { get; set; }

    [Parameter]
    public int PageNumber { get; set; }

    private string LoadingMessage
        => $"Loading {SourceId.GetNameFromId()} content";

    private Book _book;
    private Page _currentPage;

    protected override async Task OnInitializedAsync() {
        var mangas = await DatabaseHandler.GetMangasAsync(SourceId, false);
        _book = new Book(mangas);
        _currentPage = _book.GoTo(PageNumber);
    }

    private async Task RefreshAsync() {
        var mangas = await DatabaseHandler.GetMangasAsync(SourceId, true);
        _book = new Book(mangas);
        _currentPage = _book.GoTo(PageNumber);
    }

    private void Nav(int num) {
        if (!_book.IsValidPage(num)) {
            return;
        }

        NavigationManager.NavigateTo($"/sources/{SourceId}/{num}", true);
    }

    private async Task OnSearchAsync(string arg) {
        var mangas = await DatabaseHandler.SearchAsync(SearchType.Source, arg, SourceId);
        _book = new Book(mangas);
        if (_book.HasAnyPages & _book.IsValidPage(_book.Pages.Count - 1)) {
            _currentPage = _book.GoTo(_book.Pages.Count - 1);
            StateHasChanged();
        }
    }

    private async Task OnChangeAsync(ChangeEventArgs arg) {
        var mangas = await DatabaseHandler.GetMangasAsync(SourceId, false);
        var sorted = int.Parse($"{arg.Value}") switch {
            1 => mangas
                .OrderByDescending(x => x.Chapters.FirstOrDefault()!.ReleasedOn),
            2 => mangas
                .OrderBy(x => x.Name),
            3 => mangas
                .OrderByDescending(x => x.Chapters.Count)
        };
        _book = new Book(sorted);
        _currentPage = _book.GoTo(PageNumber);
        StateHasChanged();
    }
}