@page "/sources/{SourceId}"
@using Grimoire.Web.Handlers
@using Grimoire.Sources.Miscellaneous

@inject CacheHandler CacheHandler
@inject IConfiguration Configuration
@inject IJSRuntime JsRuntime

<div class="container-lg py-4">
    @if (_pagination == default || _pagination.Active == default) {
        <Waiting Message=@LoadingMessage/>
    }
    else {
        <div class="row row-cols-1 g-5">
            <div class="col">
                <div class="card text-center">
                    <div class="card-header">
                        <h3 class="card-title">🕹️ @SourceId.GetNameFromId() 🕹️</h3>
                    </div>

                    <div class="card-body">
                        <NavLink class="btn btn-primary" onclick="@RefreshAsync">
                            🔃 Refresh
                        </NavLink>
                    </div>
                </div>
            </div>

            <div class="col">
                <div id="carouselExampleSlidesOnly" class="carousel slide carousel-fade shadow-lg" data-bs-ride="carousel">
                    <div class="carousel-inner">
                        @foreach (var manga in _pagination.Active.Items) {
                            <div class="carousel-item @(_pagination.Active.Items.IndexOf(manga) == 1 ? "active" : "")">
                                <img src="@Configuration.GetCover(CacheHandler.Get<string>($"{SourceId}@{manga.Id}"), manga.Cover)"
                                     class="rounded-4" alt="@manga.Name">
                            </div>
                        }
                    </div>

                    <button class="carousel-control-prev" type="button" data-bs-target="#carouselExampleSlidesOnly" data-bs-slide="prev">
                        <span class="carousel-control-prev-icon" aria-hidden="true"></span>
                        <span class="visually-hidden">Previous</span>
                    </button>
                    <button class="carousel-control-next" type="button" data-bs-target="#carouselExampleSlidesOnly" data-bs-slide="next">
                        <span class="carousel-control-next-icon" aria-hidden="true"></span>
                        <span class="visually-hidden">Next</span>
                    </button>

                </div>
            </div>

            <div class="col">
                <div class="row row-cols-2 row-cols-md-4 g-4">
                    @foreach (var manga in _pagination.Active.Items) {
                        <div class="col">
                            <MangaCard SourceId="@SourceId" Manga="@manga"/>
                        </div>
                    }
                </div>
            </div>

            @if (_pagination.HasPages) {
                <div class="col">
                    <nav aria-label="Page navigation">
                        <ul class="pagination pagination-lg justify-content-center">
                            <li class="page-item @(_pagination.Active.Previous == default ? "disabled" : "")">
                                <a class="page-link" @onclick="() => NavAsync(false)">
                                    <span aria-hidden="true">&laquo;</span>
                                </a>
                            </li>

                            <li class="page-item @(_pagination.Active.Next == default ? "disabled" : "")">
                                <a class="page-link" @onclick="() => NavAsync(true)">
                                    <span aria-hidden="true">&raquo;</span>
                                </a>
                            </li>

                        </ul>
                    </nav>
                </div>
            }
        </div>
    }
</div>

@code
{
    [Parameter]
    public string SourceId { get; set; }

    private string LoadingMessage
        => $"Loading {SourceId.GetNameFromId()} content";

    private Pagination _pagination;

    protected override async Task OnInitializedAsync() {
        var mangas = await CacheHandler.GetMangasAsync(SourceId, false);
        _pagination = new Pagination(mangas);
    }

    private async Task RefreshAsync() {
        var mangas = await CacheHandler.GetMangasAsync(SourceId, true);
        _pagination = new Pagination(mangas);
    }

    private async void NavAsync(bool isNext) {
        if (isNext) {
            _pagination.Next();
        }
        else {
            _pagination.Previous();
        }

        await JsRuntime.InvokeVoidAsync("OnScrollEvent");
    }

}