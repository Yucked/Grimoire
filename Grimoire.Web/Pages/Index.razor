@page "/"
@using Grimoire.Common.Models
@using Grimoire.Providers
@using System.Text.Json

@inject NavigationManager NavigationManager
<div class="container p-4">
    @if (_mangas?.Count == 0 || _mangas == default) {
        <div class="d-flex justify-content-center">
            <div class="spinner-border" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
        </div>
    }
    else {
        <div class="container pb-3">
            <div id="carouselExampleSlidesOnly" class="carousel slide carousel-fade shadow-lg" data-bs-ride="carousel">
                <div class="carousel-inner">
                    @for (var i = 0; i < _mangas.Count; i++) {
                        <div class="carousel-item @(i == 0 ? "active" : string.Empty)">
                            <img src="@_mangas[i].Cover" class="rounded-4" alt="...">
                        </div>
                    }
                </div>

                <button class="carousel-control-prev" type="button" data-bs-target="#carouselExampleSlidesOnly" data-bs-slide="prev">
                    <span class="carousel-control-prev-icon" aria-hidden="true"></span>
                    <span class="visually-hidden">Previous</span>
                </button>
                <button class="carousel-control-next" type="button" data-bs-target="#carouselExampleSlidesOnly" data-bs-slide="next">
                    <span class="carousel-control-next-icon" aria-hidden="true"></span>
                    <span class="visually-hidden">Next</span>
                </button>

            </div>
        </div>

        <div class="container pt-2">
            <div class="row row-cols-1 row-cols-lg-4 g-4">
                @foreach (var manga in _mangas) {
                    <div class="col">
                        <div class="card h-100 shadow-sm" @onclick="() => OpenMangaPage(manga.Name)">
                            <img src="@manga.Cover" class="card-img-top" alt="@manga.Name">
                            <div class="card-body">
                                <h5 class="card-title">
                                    <p>
                                        @manga.Name
                                    </p>
                                </h5>
                                <p class="card-text">
                                    <small class="text-body-secondary">
                                        @Truncate(manga.Summary)
                                    </small>
                                </p>
                            </div>
                            <div class="card-footer">
                                <small class="text-body-secondary">Last fetched on @(manga.LastFetch.ToString("D"))</small>
                            </div>
                        </div>
                    </div>
                }
            </div>
        </div>
    }
</div >


@code {

    private IReadOnlyList<Manga>? _mangas;

    protected override async Task OnInitializedAsync() {
        _mangas = JsonSerializer.Deserialize<IReadOnlyList<Manga>>(
            await File.ReadAllBytesAsync($"{nameof(TCBScansProvider)}.json"))!;
    }

    private void OpenMangaPage(string name) {
        NavigationManager.NavigateTo($"/manga/{name.Replace(' ', '-')}");
    }

    private static string Truncate(string str) {
        return str.Length > 150 ?
            $"{str[..150]}..." : str;
    }

}