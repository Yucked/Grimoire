@page "/sources/{SourceId}"
@using Grimoire.Web.Handlers

@inject CacheHandler CacheHandler
@inject NavigationManager NavigationManager
@inject IConfiguration Configuration
@inject IJSRuntime JsRuntime

<div class="container-lg py-4">
    @if (_pagination == default || _pagination.Active == default) {
        <Waiting/>
    }
    else {
        <div class="row row-cols-1 g-5">
            <div class="col">
                <div id="carouselExampleSlidesOnly" class="carousel slide carousel-fade shadow-lg" data-bs-ride="carousel">
                    <div class="carousel-inner">
                        @foreach (var manga in _pagination.Active.Items) {
                            <div class="carousel-item @(_pagination.Active.Items.IndexOf(manga) == 1 ? "active" : "")">
                                <img src="@Configuration.GetCover(CacheHandler.Get<string>($"{SourceId}@{manga.Id}"), manga.Cover)"
                                     class="rounded-4" alt="@manga.Name">
                            </div>
                        }
                    </div>

                    <button class="carousel-control-prev" type="button" data-bs-target="#carouselExampleSlidesOnly" data-bs-slide="prev">
                        <span class="carousel-control-prev-icon" aria-hidden="true"></span>
                        <span class="visually-hidden">Previous</span>
                    </button>
                    <button class="carousel-control-next" type="button" data-bs-target="#carouselExampleSlidesOnly" data-bs-slide="next">
                        <span class="carousel-control-next-icon" aria-hidden="true"></span>
                        <span class="visually-hidden">Next</span>
                    </button>

                </div>
            </div>

            <div class="col">
                <div class="row row-cols-2 row-cols-md-4 g-4">
                    @foreach (var manga in _pagination.Active.Items) {
                        <div class="col">
                            <div class="card h-100 shadow-sm" @onclick="() => NavTo(manga.Id)">
                                <img src="@Configuration.GetCover(CacheHandler.Get<string>($"{SourceId}@{manga.Id}"), manga.Cover)"
                                     class="card-img-top" alt="@manga.Name">
                                <div class="card-body">
                                    <h5 class="card-title">
                                        <p>
                                            @manga.Name
                                        </p>
                                    </h5>

                                    <p class="card-text">
                                        <small class="text-body-secondary">
                                            @Truncate(manga.Summary)
                                        </small>
                                    </p>
                                </div>
                                <div class="card-footer">
                                    <small class="text-body-secondary">
                                        @if (manga.Chapters?.FirstOrDefault()?.ReleasedOn != null) {
                                            <span>⌛ Latest Chapter: @manga.Chapters?.FirstOrDefault()?.ReleasedOn</span>
                                        }
                                        else {
                                            <span>⚠️ No information on latest release</span>
                                        }
                                    </small>
                                </div>
                            </div>
                        </div>
                    }
                </div>
            </div>

            @if (_pagination.HasPages) {
                <div class="col">
                    <nav aria-label="Page navigation">
                        <ul class="pagination pagination-lg justify-content-center">
                            <li class="page-item @(_pagination.Active.Previous == default ? "disabled" : "")">
                                <a class="page-link" @onclick="() => NavAsync(false)">
                                    <span aria-hidden="true">&laquo;</span>
                                </a>
                            </li>

                            <li class="page-item @(_pagination.Active.Next == default ? "disabled" : "")">
                                <a class="page-link" @onclick="() => NavAsync(true)">
                                    <span aria-hidden="true">&raquo;</span>
                                </a>
                            </li>

                        </ul>
                    </nav>
                </div>
            }
        </div>
    }
</div>

@code
{
    [Parameter]
    public string SourceId { get; set; }

    private Pagination _pagination;

    protected override async Task OnInitializedAsync() {
        var mangas = await CacheHandler.GetMangasAsync(SourceId);
        _pagination = new Pagination(mangas);
    }

    private void NavTo(string mangaId) {
        NavigationManager.NavigateTo($"/{SourceId}/{mangaId}");
    }

    private async void NavAsync(bool isNext) {
        if (isNext) {
            _pagination.Next();
        }
        else {
            _pagination.Previous();
        }

        await JsRuntime.InvokeVoidAsync("OnScrollEvent");
    }

    private static string Truncate(string str) {
        return str.Length > 150 ?
            $"{str[..150]}..." : str;
    }

}